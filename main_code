### main code

import torch
import pandas as pd
import numpy as np
import torch
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import KFold
#from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder


df = pd.read_csv('project/EEG.machinelearing_data_BRMH.csv')
patients_info = df.loc[:,'sex':'specific.disorder']

encoder = OneHotEncoder(sparse=False)
y = encoder.fit_transform(df[['specific.disorder']])


# Encoding 'sex' as 0 for M and 1 for F
df['sex'] = df['sex'].map({'M': 0, 'F': 1})  

column_to_delete1 = 'main.disorder'
df = df.drop(column_to_delete1, axis=1)

#sletter kolonnen med datoer 
column_to_delete2 = 'eeg.date'
df = df.drop(column_to_delete2, axis=1)

#sletter kolonnen med tal på patient
column_to_delete3 = 'no.'
df = df.drop(column_to_delete3, axis=1)

## missing data 
missing = df.isna().sum()

df[["education", "IQ"]] = df[["education", "IQ"]].fillna(df[["education", "IQ"]].median())


##  test multiclasification 
X = df.loc[:, df.columns != "specific.disorder"]
#y = df.loc[:,"specific.disorder"]

device = torch.device('cpu')
#device = torch.device('cuda')


# Manually set random seed
#torch.manual_seed(1)

# Use the nn package to define our model and loss function.
model = torch.nn.Sequential(
    torch.nn.Linear(1146, 1000),
    torch.nn.ReLU(),
    torch.nn.Linear(1000, 500),
    torch.nn.ReLU(),
    torch.nn.Linear(500, 12),
)

model.to(device)
loss_fn = torch.nn.CrossEntropyLoss(reduction='mean')


learning_rate = 1e-3
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate, weight_decay=0.01)

# splitter dataen i trænings- og testsæt. 
k_folds = 10

# Number of iterations
T = 10

for train, test in KFold(n_splits=k_folds, shuffle=True, random_state=42).split(X,y):
    X_train, y_train = X.iloc[train], y[train]
    X_test, y_test = X.iloc[test], y[test]
    
    for t in range(T):
        # Forward pass: compute predicted y by passing x to the model.
        print(X_train.shape, y_train.shape)
        print(y)
        X_train = torch.tensor(X_train)
        y_pred = model(X_train)

        # Compute and save loss.
        train_loss = loss_fn(y_pred, y_train)
        #Loss[t] = loss.item()

        optimizer.zero_grad()

        # Backward pass: compute gradient of the loss with respect to model
        train_loss.backward()

        # Calling the step function on an Optimizer makes an update to its
        # parameters
        optimizer.step()    
        
        print(train_loss)
    
    #test_df = X_test.drop("main.disorder",axis=1), y_test









