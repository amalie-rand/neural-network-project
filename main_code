### main code

import torch
import pandas as pd
df = pd.read_csv('./EEG.machinelearing_data_BRMH.csv')
patients_info = df.loc[:,'sex':'specific.disorder']

# Encoding 'sex' as 0 for M and 1 for F
df['sex'] = df['sex'].map({'M': 0, 'F': 1})  

#sletter kolonnen med datoer 
column_to_delete = 'eeg.date'
df = df.drop(column_to_delete, axis=1)

#sletter kolonnen med main disorder
column_to_delete2 = 'main.disorder'
df = df.drop(column_to_delete2, axis=1)

#sletter kolonnen med tal på patient
column_to_delete3 = 'no.'
df = df.drop(column_to_delete3, axis=1)

## missing data 
missing = df.isna().sum()
# print(missing[missing > 0])

df[["education", "IQ"]] = df[["education", "IQ"]].fillna(df[["education", "IQ"]].median())


##  test multiclasification 
X = df.loc[:, df.columns != "specific.disorder"]
y = df.loc[:,"specific.disorder"]


# splitter dataen i trænings- og testsæt. 
k_folds = 10

for train, test in KFold(n_splits=k_folds, shuffle=True, random_state=42).split(X,y):
    train_df = X_train, y_train = X.iloc[train], y.iloc[train]
    test_df = X_test, y_test = X.iloc[test], y.iloc[test]

#Neurale netværk


# Device to use for computations
device = torch.device('cpu')
#device = torch.device('cuda')

# Create Tensors to hold inputs and outputs
x = torch.tensor(np.expand_dims(x_train,1), dtype=torch.float32, device=device)
y = torch.tensor(np.expand_dims(y_train,1), dtype=torch.float32, device=device)

# Manually set random seed
#torch.manual_seed(1)

# Use the nn package to define our model and loss function.
model = torch.nn.Sequential(
    torch.nn.Linear(1146, 1000),
    torch.nn.ReLU(),
    torch.nn.Linear(1000, 500),
    torch.nn.ReLU(),
    torch.nn.Linear(500, 12),
)
model.to(device)
loss_fn = torch.nn.CrossEntropyLoss(reduction='mean')

# Use the optim package to define an Optimizer that will update the weights of
# the model for us. Here we will use Adam; the optim package contains many other
# optimization algoriths. The first argument to the Adam constructor tells the
# optimizer which Tensors it should update.

#learning rate and L2 regularization/weight_decay
learning_rate = 1e-3
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate, weight_decay=0.01)


# Number of iterations
T = 5000
# Allocate space for loss
Loss = np.zeros(T)

for t in range(T):
    # Forward pass: compute predicted y by passing x to the model.
    y_pred = model(x)

    # Compute and save loss.
    loss = loss_fn(y_pred, y)
    Loss[t] = loss.item()

    # Before the backward pass, use the optimizer object to zero all of the
    # gradients for the variables it will update (which are the learnable
    # weights of the model). This is because by default, gradients are
    # accumulated in buffers( i.e, not overwritten) whenever .backward()
    # is called. Checkout docs of torch.autograd.backward for more details.
    optimizer.zero_grad()

    # Backward pass: compute gradient of the loss with respect to model
    # parameters
    loss.backward()

    # Calling the step function on an Optimizer makes an update to its
    # parameters
    optimizer.step()    

plt.plot(Loss)
plt.grid(True)



